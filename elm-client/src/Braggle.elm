{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Braggle exposing
    ( Attributes, TagChildren(..), Tag, ElementElementKind(..), ElementKind(..), Element, PartialServerState, PollRequest, PollResponse, ClickEvent, TextInputEvent, InteractionKind(..), Interaction, InteractionRequest, InteractionResponse
    , attributesDecoder, tagDecoder, elementDecoder, partialServerStateDecoder, pollRequestDecoder, pollResponseDecoder, clickEventDecoder, textInputEventDecoder, interactionDecoder, interactionRequestDecoder, interactionResponseDecoder
    , toAttributesEncoder, toTagEncoder, toElementEncoder, toPartialServerStateEncoder, toPollRequestEncoder, toPollResponseEncoder, toClickEventEncoder, toTextInputEventEncoder, toInteractionEncoder, toInteractionRequestEncoder, toInteractionResponseEncoder
    )

{-| ProtoBuf module: `Braggle`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.7.1
  - the following specification file: `protobuf/element.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Attributes, TagChildren, Tag, ElementElementKind, ElementKind, Element, PartialServerState, PollRequest, PollResponse, ClickEvent, TextInputEvent, InteractionKind, Interaction, InteractionRequest, InteractionResponse


# Decoder

@docs attributesDecoder, tagDecoder, elementDecoder, partialServerStateDecoder, pollRequestDecoder, pollResponseDecoder, clickEventDecoder, textInputEventDecoder, interactionDecoder, interactionRequestDecoder, interactionResponseDecoder


# Encoder

@docs toAttributesEncoder, toTagEncoder, toElementEncoder, toPartialServerStateEncoder, toPollRequestEncoder, toPollResponseEncoder, toClickEventEncoder, toTextInputEventEncoder, toInteractionEncoder, toInteractionRequestEncoder, toInteractionResponseEncoder

-}

import Dict
import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Attributes` message
-}
type alias Attributes =
    { misc : Dict.Dict String String
    }


{-| TagChildren
-}
type TagChildren
    = TagChildren (List Element)


{-| `Tag` message
-}
type alias Tag =
    { tagname : String
    , attributes : Maybe Attributes
    , children : TagChildren
    }


{-| ElementElementKind
-}
type ElementElementKind
    = ElementElementKind (Maybe ElementKind)


{-| ElementKind
-}
type ElementKind
    = ElementKindRef String
    | ElementKindText String
    | ElementKindTag Tag


{-| `Element` message
-}
type alias Element =
    { elementKind : ElementElementKind
    }


{-| `PartialServerState` message
-}
type alias PartialServerState =
    { timestep : Int
    , rootId : String
    , elements : Dict.Dict String (Maybe Element)
    }


{-| `PollRequest` message
-}
type alias PollRequest =
    { sinceTimestep : Int
    }


{-| `PollResponse` message
-}
type alias PollResponse =
    { state : Maybe PartialServerState
    }


{-| `ClickEvent` message
-}
type alias ClickEvent =
    { elementId : String
    }


{-| `TextInputEvent` message
-}
type alias TextInputEvent =
    { elementId : String
    , value : String
    }


{-| InteractionKind
-}
type InteractionKind
    = InteractionKindClick ClickEvent
    | InteractionKindTextInput TextInputEvent


{-| `Interaction` message
-}
type alias Interaction =
    { interactionKind : Maybe InteractionKind
    }


{-| `InteractionRequest` message
-}
type alias InteractionRequest =
    { interaction : Maybe Interaction
    }


{-| `InteractionResponse` message
-}
type alias InteractionResponse =
    {}



-- DECODER


{-| `Attributes` decoder
-}
attributesDecoder : Decode.Decoder Attributes
attributesDecoder =
    Decode.message (Attributes Dict.empty)
        [ Decode.mapped 1 ( "", "" ) Decode.string Decode.string .misc setMisc
        ]


unwrapTagChildren : TagChildren -> List Element
unwrapTagChildren (TagChildren value) =
    value


{-| `Tag` decoder
-}
tagDecoder : Decode.Decoder Tag
tagDecoder =
    Decode.message (Tag "" Nothing (TagChildren []))
        [ Decode.optional 1 Decode.string setTagname
        , Decode.optional 2 (Decode.map Just attributesDecoder) setAttributes
        , Decode.repeated 3 (Decode.lazy (\_ -> elementDecoder)) (unwrapTagChildren << .children) (setChildren << TagChildren)
        ]


unwrapElementElementKind : ElementElementKind -> Maybe ElementKind
unwrapElementElementKind (ElementElementKind value) =
    value


{-| `Element` decoder
-}
elementDecoder : Decode.Decoder Element
elementDecoder =
    Decode.message (Element (ElementElementKind Nothing))
        [ Decode.oneOf
            [ ( 1, Decode.lazy (\_ -> Decode.map ElementKindRef Decode.string) )
            , ( 2, Decode.lazy (\_ -> Decode.map ElementKindText Decode.string) )
            , ( 3, Decode.lazy (\_ -> Decode.map ElementKindTag tagDecoder) )
            ]
            (setElementKind << ElementElementKind)
        ]


{-| `PartialServerState` decoder
-}
partialServerStateDecoder : Decode.Decoder PartialServerState
partialServerStateDecoder =
    Decode.message (PartialServerState 0 "" Dict.empty)
        [ Decode.optional 1 Decode.int32 setTimestep
        , Decode.optional 2 Decode.string setRootId
        , Decode.mapped 3 ( "", Nothing ) Decode.string (Decode.map Just elementDecoder) .elements setElements
        ]


{-| `PollRequest` decoder
-}
pollRequestDecoder : Decode.Decoder PollRequest
pollRequestDecoder =
    Decode.message (PollRequest 0)
        [ Decode.optional 1 Decode.int32 setSinceTimestep
        ]


{-| `PollResponse` decoder
-}
pollResponseDecoder : Decode.Decoder PollResponse
pollResponseDecoder =
    Decode.message (PollResponse Nothing)
        [ Decode.optional 1 (Decode.map Just partialServerStateDecoder) setState
        ]


{-| `ClickEvent` decoder
-}
clickEventDecoder : Decode.Decoder ClickEvent
clickEventDecoder =
    Decode.message (ClickEvent "")
        [ Decode.optional 1 Decode.string setElementId
        ]


{-| `TextInputEvent` decoder
-}
textInputEventDecoder : Decode.Decoder TextInputEvent
textInputEventDecoder =
    Decode.message (TextInputEvent "" "")
        [ Decode.optional 1 Decode.string setElementId
        , Decode.optional 2 Decode.string setValue
        ]


{-| `Interaction` decoder
-}
interactionDecoder : Decode.Decoder Interaction
interactionDecoder =
    Decode.message (Interaction Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map InteractionKindClick clickEventDecoder )
            , ( 2, Decode.map InteractionKindTextInput textInputEventDecoder )
            ]
            setInteractionKind
        ]


{-| `InteractionRequest` decoder
-}
interactionRequestDecoder : Decode.Decoder InteractionRequest
interactionRequestDecoder =
    Decode.message (InteractionRequest Nothing)
        [ Decode.optional 1 (Decode.map Just interactionDecoder) setInteraction
        ]


{-| `InteractionResponse` decoder
-}
interactionResponseDecoder : Decode.Decoder InteractionResponse
interactionResponseDecoder =
    Decode.message InteractionResponse
        []



-- ENCODER


{-| `Attributes` encoder
-}
toAttributesEncoder : Attributes -> Encode.Encoder
toAttributesEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.string Encode.string model.misc )
        ]


{-| `Tag` encoder
-}
toTagEncoder : Tag -> Encode.Encoder
toTagEncoder model =
    Encode.message
        [ ( 1, Encode.string model.tagname )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toAttributesEncoder) model.attributes )
        , ( 3, Encode.list toElementEncoder (unwrapTagChildren model.children) )
        ]


toElementKindEncoder : ElementKind -> ( Int, Encode.Encoder )
toElementKindEncoder model =
    case model of
        ElementKindRef value ->
            ( 1, Encode.string value )

        ElementKindText value ->
            ( 2, Encode.string value )

        ElementKindTag value ->
            ( 3, toTagEncoder value )


{-| `Element` encoder
-}
toElementEncoder : Element -> Encode.Encoder
toElementEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toElementKindEncoder (unwrapElementElementKind model.elementKind)
        ]


{-| `PartialServerState` encoder
-}
toPartialServerStateEncoder : PartialServerState -> Encode.Encoder
toPartialServerStateEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.timestep )
        , ( 2, Encode.string model.rootId )
        , ( 3, Encode.dict Encode.string (Maybe.withDefault Encode.none << Maybe.map toElementEncoder) model.elements )
        ]


{-| `PollRequest` encoder
-}
toPollRequestEncoder : PollRequest -> Encode.Encoder
toPollRequestEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.sinceTimestep )
        ]


{-| `PollResponse` encoder
-}
toPollResponseEncoder : PollResponse -> Encode.Encoder
toPollResponseEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toPartialServerStateEncoder) model.state )
        ]


{-| `ClickEvent` encoder
-}
toClickEventEncoder : ClickEvent -> Encode.Encoder
toClickEventEncoder model =
    Encode.message
        [ ( 1, Encode.string model.elementId )
        ]


{-| `TextInputEvent` encoder
-}
toTextInputEventEncoder : TextInputEvent -> Encode.Encoder
toTextInputEventEncoder model =
    Encode.message
        [ ( 1, Encode.string model.elementId )
        , ( 2, Encode.string model.value )
        ]


toInteractionKindEncoder : InteractionKind -> ( Int, Encode.Encoder )
toInteractionKindEncoder model =
    case model of
        InteractionKindClick value ->
            ( 1, toClickEventEncoder value )

        InteractionKindTextInput value ->
            ( 2, toTextInputEventEncoder value )


{-| `Interaction` encoder
-}
toInteractionEncoder : Interaction -> Encode.Encoder
toInteractionEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toInteractionKindEncoder model.interactionKind
        ]


{-| `InteractionRequest` encoder
-}
toInteractionRequestEncoder : InteractionRequest -> Encode.Encoder
toInteractionRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toInteractionEncoder) model.interaction )
        ]


{-| `InteractionResponse` encoder
-}
toInteractionResponseEncoder : InteractionResponse -> Encode.Encoder
toInteractionResponseEncoder model =
    Encode.message
        []



-- SETTERS


setMisc : a -> { b | misc : a } -> { b | misc : a }
setMisc value model =
    { model | misc = value }


setTagname : a -> { b | tagname : a } -> { b | tagname : a }
setTagname value model =
    { model | tagname = value }


setAttributes : a -> { b | attributes : a } -> { b | attributes : a }
setAttributes value model =
    { model | attributes = value }


setChildren : a -> { b | children : a } -> { b | children : a }
setChildren value model =
    { model | children = value }


setElementKind : a -> { b | elementKind : a } -> { b | elementKind : a }
setElementKind value model =
    { model | elementKind = value }


setTimestep : a -> { b | timestep : a } -> { b | timestep : a }
setTimestep value model =
    { model | timestep = value }


setRootId : a -> { b | rootId : a } -> { b | rootId : a }
setRootId value model =
    { model | rootId = value }


setElements : a -> { b | elements : a } -> { b | elements : a }
setElements value model =
    { model | elements = value }


setSinceTimestep : a -> { b | sinceTimestep : a } -> { b | sinceTimestep : a }
setSinceTimestep value model =
    { model | sinceTimestep = value }


setState : a -> { b | state : a } -> { b | state : a }
setState value model =
    { model | state = value }


setElementId : a -> { b | elementId : a } -> { b | elementId : a }
setElementId value model =
    { model | elementId = value }


setValue : a -> { b | value : a } -> { b | value : a }
setValue value model =
    { model | value = value }


setInteractionKind : a -> { b | interactionKind : a } -> { b | interactionKind : a }
setInteractionKind value model =
    { model | interactionKind = value }


setInteraction : a -> { b | interaction : a } -> { b | interaction : a }
setInteraction value model =
    { model | interaction = value }
